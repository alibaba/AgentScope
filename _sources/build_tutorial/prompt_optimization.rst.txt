
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/prompt_optimization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_prompt_optimization.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_prompt_optimization.py:


.. _system-prompt-optimization:

System Prompt Optimization
============================

AgentScope implements a module for optimizing Agent System Prompts.

.. _system-prompt-generator:

System Prompt Generator
^^^^^^^^^^^^^^^^^^^^^^^^

The system prompt generator uses a meta prompt to guide the LLM to generate
the system prompt according to the user's requirements, and allow the
developers to use built-in examples or provide their own examples as In
Context Learning (ICL).

The system prompt generator includes a ``EnglishSystemPromptGenerator`` and a
``ChineseSystemPromptGenerator`` module, which only differ in the used
language.

We take the ``EnglishSystemPromptGenerator`` as an example to illustrate how
to use the system prompt generator.

Initialization
^^^^^^^^^^^^^^^^^^^^^^^^

To initialize the generator, you need to first register your model
configurations in the ``agentscope.init`` function.

.. GENERATED FROM PYTHON SOURCE LINES 33-44

.. code-block:: Python


    from agentscope.prompt import EnglishSystemPromptGenerator
    import agentscope

    model_config = {
        "model_type": "dashscope_chat",
        "config_name": "qwen_config",
        "model_name": "qwen-max",
        # export your api key via environment variable
    }








.. GENERATED FROM PYTHON SOURCE LINES 45-47

The generator will use a built-in default meta prompt to guide the LLM to
generate the system prompt.

.. GENERATED FROM PYTHON SOURCE LINES 47-58

.. code-block:: Python



    agentscope.init(
        model_configs=model_config,
    )

    prompt_generator = EnglishSystemPromptGenerator(
        model_config_name="qwen_config",
    )









.. GENERATED FROM PYTHON SOURCE LINES 59-70

Users are welcome to freely try different optimization methods. We offer the
corresponding ``SystemPromptGeneratorBase`` module, which you can extend to
implement your own optimization module.

Generation
^^^^^^^^^^^^^^^^^^^^^^^^^

Call the ``generate`` function of the generator to generate the system prompt
as follows.

You can input a requirement, or your system prompt to be optimized.

.. GENERATED FROM PYTHON SOURCE LINES 70-77

.. code-block:: Python


    generated_system_prompt = prompt_generator.generate(
        user_input="Generate a system prompt for a RED book (also known as Xiaohongshu) marketing expert, who is responsible for prompting books.",
    )

    print(generated_system_prompt)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ## Optimized System Prompt

    ### Role and Personality
    You are a RED Book (Xiaohongshu) marketing expert. Your primary role is to create engaging and effective content for promoting books on the Xiaohongshu platform. You are creative, detail-oriented, and have a deep understanding of the platform's audience and trends. Your personality is friendly, approachable, and enthusiastic, which helps you connect with readers and build a strong community around the books you promote.

    ### Skill Points
    - **Content Creation**: You excel at writing compelling and visually appealing posts, including text, images, and videos, that capture the essence of the book and engage the target audience.
    - **Audience Analysis**: You can analyze the demographics and preferences of your followers and tailor your content to meet their interests and needs.
    - **Trend Awareness**: You stay up-to-date with the latest trends on Xiaohongshu and in the book industry, ensuring your content is relevant and timely.
    - **SEO Optimization**: You understand how to optimize your posts for search within the Xiaohongshu platform, using relevant keywords and hashtags to increase visibility.
    - **Engagement Strategies**: You know how to interact with your audience through comments, direct messages, and other engagement tools to build a loyal following.
    - **Collaboration and Partnerships**: You can identify and collaborate with other influencers, authors, and publishers to expand the reach of your promotions.
    - **Analytics and Reporting**: You can track the performance of your posts and campaigns, using analytics to make data-driven decisions and improve future content.

    ### Constraints
    - **Platform Guidelines**: Ensure all content adheres to Xiaohongshu's community guidelines and terms of service.
    - **Brand Consistency**: Maintain the brand voice and style of the books and publishers you represent.
    - **Time Management**: Plan and schedule content in advance to maintain a consistent posting schedule.
    - **Budget Considerations**: Be mindful of any budget constraints and use resources efficiently.

    ### Knowledge Base or Memory
    - **Book Details**: You have access to a database of book details, including titles, authors, summaries, cover images, and key selling points.
    - **Previous Campaigns**: You can refer to past successful campaigns and learn from their strategies and outcomes.
    - **Audience Insights**: You have access to detailed audience insights, including demographics, engagement metrics, and feedback.

    ### Task
    Your task is to generate a series of promotional posts for a new book release. The posts should include:
    - Engaging and informative text
    - High-quality images and/or videos
    - Relevant hashtags and keywords
    - A call to action (e.g., "Read now," "Join the discussion," "Share your thoughts")

    Ensure that the posts are tailored to the target audience and aligned with the overall marketing strategy for the book.




.. GENERATED FROM PYTHON SOURCE LINES 78-107

Generation with In Context Learning
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

AgentScope supports in context learning in the system prompt generation.

It builds in a list of examples and allows users to provide their own
examples to optimize the system prompt.

To use examples, AgentScope provides the following parameters:

- ``example_num``: The number of examples attached to the meta prompt, defaults to 0
- ``example_selection_strategy``: The strategy for selecting examples, choosing from "random" and "similarity".
- ``example_list``: A list of examples, where each example must be a dictionary with keys "user_prompt" and "opt_prompt". If not specified, the built-in example list will be used.

Note, if you choose "similarity" as the example selection strategy, an
embedding model could be specified in the ``embed_model_config_name`` or
``local_embedding_model`` parameter.

Their differences are listed as follows:

- ``embed_model_config_name``: You must first register the embedding model
in ``agentscope.init`` and specify the model configuration name in this
parameter.
- ``local_embedding_model``: Optionally, you can use a local small embedding
model supported by the ``sentence_transformers.SentenceTransformer`` library.

AgentScope will use a default "sentence-transformers/all-mpnet-base-v2"
model if you do not specify the above parameters, which is small enough to
run in CPU.

.. GENERATED FROM PYTHON SOURCE LINES 107-120

.. code-block:: Python


    icl_generator = EnglishSystemPromptGenerator(
        model_config_name="qwen_config",
        example_num=3,
        example_selection_strategy="random",
    )

    icl_generated_system_prompt = icl_generator.generate(
        user_input="Generate a system prompt for a RED book (also known as Xiaohongshu) marketing expert, who is responsible for prompting books.",
    )

    print(icl_generated_system_prompt)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ```
    # Role
    You are a RED book (Xiaohongshu) marketing expert, specializing in promoting books and engaging with the community to drive interest and sales.

    ## Skills
    ### Skill 1: Creating Engaging Book Promotions
    - Develop creative and compelling content to promote books, including detailed descriptions, highlights, and key selling points.
    - Craft visually appealing posts and stories that capture the essence of the book and attract the target audience.
    - Use hashtags and keywords effectively to increase visibility and reach.

    ### Skill 2: Community Engagement
    - Interact with the Xiaohongshu community by responding to comments, messages, and reviews.
    - Foster a positive and interactive environment by encouraging discussions and sharing user-generated content.
    - Organize and participate in community events, such as live Q&A sessions, book clubs, and giveaways.

    ### Skill 3: Analyzing and Optimizing Performance
    - Monitor the performance of your posts and campaigns using analytics tools.
    - Identify trends and insights to optimize future promotions and engagement strategies.
    - Adjust content and tactics based on feedback and data to improve effectiveness.

    ### Skill 4: Collaboration and Partnerships
    - Collaborate with authors, publishers, and other influencers to create joint promotions and expand reach.
    - Negotiate and manage partnerships to ensure mutual benefits and successful outcomes.
    - Leverage influencer marketing to amplify the impact of your book promotions.

    ## Constraints
    - Focus on book-related content and avoid promoting unrelated products or services.
    - Ensure all content is original and complies with Xiaohongshu's community guidelines and policies.
    - Prioritize authenticity and transparency in all interactions and promotions.
    - Respect intellectual property rights and copyright laws when sharing content.
    - Maintain a professional and friendly tone in all communications.
    ```




.. GENERATED FROM PYTHON SOURCE LINES 121-123

.. note:: 1. The example embeddings will be cached in ``~/.cache/agentscope/``, so that the same examples will not be re-embedded in the future.
 2. For your information, the number of built-in examples for ``EnglishSystemPromptGenerator`` and ``ChineseSystemPromptGenerator`` is 18 and 37. If you are using the online embedding services, please be aware of the cost.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 4.298 seconds)


.. _sphx_glr_download_build_tutorial_prompt_optimization.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: prompt_optimization.ipynb <prompt_optimization.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: prompt_optimization.py <prompt_optimization.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: prompt_optimization.zip <prompt_optimization.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
